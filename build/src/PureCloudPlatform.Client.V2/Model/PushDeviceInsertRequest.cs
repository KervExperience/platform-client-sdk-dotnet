using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PureCloudPlatform.Client.V2.Client;

namespace PureCloudPlatform.Client.V2.Model
{
    /// <summary>
    /// PushDeviceInsertRequest
    /// </summary>
    [DataContract]
    public partial class PushDeviceInsertRequest :  IEquatable<PushDeviceInsertRequest>
    {
        /// <summary>
        /// The notification provider for the device (FCM / APNS)
        /// </summary>
        /// <value>The notification provider for the device (FCM / APNS)</value>
        [JsonConverter(typeof(UpgradeSdkEnumConverter))]
        public enum NotificationProviderEnum
        {
            /// <summary>
            /// Your SDK version is out of date and an unknown enum value was encountered. 
            /// Please upgrade the SDK using the command "Upgrade-Package PureCloudApiSdk" 
            /// in the Package Manager Console
            /// </summary>
            [EnumMember(Value = "OUTDATED_SDK_VERSION")]
            OutdatedSdkVersion,
            
            /// <summary>
            /// Enum Fcm for "FCM"
            /// </summary>
            [EnumMember(Value = "FCM")]
            Fcm,
            
            /// <summary>
            /// Enum Apns for "APNS"
            /// </summary>
            [EnumMember(Value = "APNS")]
            Apns
        }
        /// <summary>
        /// The type of the device (Android / IoS)
        /// </summary>
        /// <value>The type of the device (Android / IoS)</value>
        [JsonConverter(typeof(UpgradeSdkEnumConverter))]
        public enum DeviceTypeEnum
        {
            /// <summary>
            /// Your SDK version is out of date and an unknown enum value was encountered. 
            /// Please upgrade the SDK using the command "Upgrade-Package PureCloudApiSdk" 
            /// in the Package Manager Console
            /// </summary>
            [EnumMember(Value = "OUTDATED_SDK_VERSION")]
            OutdatedSdkVersion,
            
            /// <summary>
            /// Enum Android for "android"
            /// </summary>
            [EnumMember(Value = "android")]
            Android,
            
            /// <summary>
            /// Enum Ios for "ios"
            /// </summary>
            [EnumMember(Value = "ios")]
            Ios
        }
        /// <summary>
        /// The notification provider for the device (FCM / APNS)
        /// </summary>
        /// <value>The notification provider for the device (FCM / APNS)</value>
        [DataMember(Name="notificationProvider", EmitDefaultValue=false)]
        public NotificationProviderEnum? NotificationProvider { get; set; }
        /// <summary>
        /// The type of the device (Android / IoS)
        /// </summary>
        /// <value>The type of the device (Android / IoS)</value>
        [DataMember(Name="deviceType", EmitDefaultValue=false)]
        public DeviceTypeEnum? DeviceType { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PushDeviceInsertRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PushDeviceInsertRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PushDeviceInsertRequest" /> class.
        /// </summary>
        /// <param name="DeviceToken">The device token generated by the network providers (required).</param>
        /// <param name="NotificationProvider">The notification provider for the device (FCM / APNS) (required).</param>
        /// <param name="Language">The preferred language of the user (eg. en-us, de, fr) (required).</param>
        /// <param name="DeviceType">The type of the device (Android / IoS) (required).</param>
        public PushDeviceInsertRequest(string DeviceToken = null, NotificationProviderEnum? NotificationProvider = null, string Language = null, DeviceTypeEnum? DeviceType = null)
        {
            this.DeviceToken = DeviceToken;
            this.NotificationProvider = NotificationProvider;
            this.Language = Language;
            this.DeviceType = DeviceType;
            
        }
        


        /// <summary>
        /// The device token generated by the network providers
        /// </summary>
        /// <value>The device token generated by the network providers</value>
        [DataMember(Name="deviceToken", EmitDefaultValue=false)]
        public string DeviceToken { get; set; }





        /// <summary>
        /// The preferred language of the user (eg. en-us, de, fr)
        /// </summary>
        /// <value>The preferred language of the user (eg. en-us, de, fr)</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }




        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PushDeviceInsertRequest {\n");

            sb.Append("  DeviceToken: ").Append(DeviceToken).Append("\n");
            sb.Append("  NotificationProvider: ").Append(NotificationProvider).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                Formatting = Formatting.Indented
            });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PushDeviceInsertRequest);
        }

        /// <summary>
        /// Returns true if PushDeviceInsertRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PushDeviceInsertRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PushDeviceInsertRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return true &&
                (
                    this.DeviceToken == other.DeviceToken ||
                    this.DeviceToken != null &&
                    this.DeviceToken.Equals(other.DeviceToken)
                ) &&
                (
                    this.NotificationProvider == other.NotificationProvider ||
                    this.NotificationProvider != null &&
                    this.NotificationProvider.Equals(other.NotificationProvider)
                ) &&
                (
                    this.Language == other.Language ||
                    this.Language != null &&
                    this.Language.Equals(other.Language)
                ) &&
                (
                    this.DeviceType == other.DeviceType ||
                    this.DeviceType != null &&
                    this.DeviceType.Equals(other.DeviceType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DeviceToken != null)
                    hash = hash * 59 + this.DeviceToken.GetHashCode();

                if (this.NotificationProvider != null)
                    hash = hash * 59 + this.NotificationProvider.GetHashCode();

                if (this.Language != null)
                    hash = hash * 59 + this.Language.GetHashCode();

                if (this.DeviceType != null)
                    hash = hash * 59 + this.DeviceType.GetHashCode();

                return hash;
            }
        }
    }

}
